
CS_AMT8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800062  00800062  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cff  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000819  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000649  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044a  00000000  00000000  0000262f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002a79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	d8 c0       	rjmp	.+432    	; 0x1b4 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	8a c0       	rjmp	.+276    	; 0x132 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ec       	ldi	r30, 0xC2	; 194
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 36       	cpi	r26, 0x6D	; 109
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d8 d0       	rcall	.+432    	; 0x20a <main>
  5a:	31 c1       	rjmp	.+610    	; 0x2be <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SendChar>:

volatile static unsigned char h,l;

void SendChar(char data)
{
	while(!(UCSRA&(1<<UDRE)));
  5e:	5d 9b       	sbis	0x0b, 5	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <SendChar>
	{
		UDR=data;
  62:	8c b9       	out	0x0c, r24	; 12
  64:	08 95       	ret

00000066 <SendInfoStatus>:
	}
}
void SendInfoStatus(unsigned char info,unsigned char abb,unsigned char spec)
{
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	d6 2f       	mov	r29, r22
  6c:	c4 2f       	mov	r28, r20
	SendChar(info);
  6e:	f7 df       	rcall	.-18     	; 0x5e <SendChar>
	SendChar(abb);
  70:	8d 2f       	mov	r24, r29
  72:	f5 df       	rcall	.-22     	; 0x5e <SendChar>
	SendChar(spec);
  74:	8c 2f       	mov	r24, r28
  76:	f3 df       	rcall	.-26     	; 0x5e <SendChar>
}
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	08 95       	ret

0000007e <UartInit>:

void UartInit(void)
{
	DDRD|=(1<<PIND1);
  7e:	89 9a       	sbi	0x11, 1	; 17
	DDRD&=~(1<<PIND0);
  80:	88 98       	cbi	0x11, 0	; 17
	PORTD|=1<<(PIND0);
  82:	90 9a       	sbi	0x12, 0	; 18
	
	#define BAUD 9600
	#include <util/setbaud.h>
	
	UBRRH=UBRRH_VALUE;
  84:	10 bc       	out	0x20, r1	; 32
	UBRRL=UBRRL_VALUE;
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<TXEN) | (1<<RXEN);
  8e:	88 e1       	ldi	r24, 0x18	; 24
  90:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <UartInit+0x18>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <UartInit+0x1e>
  9c:	00 00       	nop
	_delay_ms(10);
	SendInfoStatus(0x00,0x00,0x00);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	e0 df       	rcall	.-64     	; 0x66 <SendInfoStatus>
  a6:	08 95       	ret

000000a8 <SendADCValue>:
}

void SendADCValue(unsigned char _chaneladdress,uint16_t data)
{
	h=(unsigned char)(data>>8);
  a8:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <h>
	l=(unsigned char)(data);
  ac:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
	SendChar(_chaneladdress);
  b0:	d6 df       	rcall	.-84     	; 0x5e <SendChar>
	SendChar(h);
  b2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <h>
  b6:	d3 df       	rcall	.-90     	; 0x5e <SendChar>
	SendChar(l);
  b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  bc:	d0 df       	rcall	.-96     	; 0x5e <SendChar>
  be:	08 95       	ret

000000c0 <GetChar>:
}

char GetChar(){
	while (!(UCSRA&(1<<RXC)));
  c0:	5f 9b       	sbis	0x0b, 7	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <GetChar>
	return UDR;
  c4:	8c b1       	in	r24, 0x0c	; 12
}
  c6:	08 95       	ret

000000c8 <PWMInit>:

void PWMInit(void)
{
	DDRB|=(1<<PINB1)|(1<<PINB2);
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	87 bb       	out	0x17, r24	; 23
	//TCCR1A |= (1<<WGM12)|(1<<WGM10);		//8bit Fast PWM
	//TCCR1B |= (1<<WGM12)|(1<<WGM10);
	TCCR1A |= (1<<WGM12)|(1<<WGM11)|(1<<WGM10);	//10bit Fast PWM
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	8b 60       	ori	r24, 0x0B	; 11
  d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12)|(1<<WGM11)|(1<<WGM10);
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	8b 60       	ori	r24, 0x0B	; 11
  d8:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//
  da:	8f b5       	in	r24, 0x2f	; 47
  dc:	80 6a       	ori	r24, 0xA0	; 160
  de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS10);	//Prescaler 1 |(1<<CS11)
  e0:	8e b5       	in	r24, 0x2e	; 46
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<CS10);
  e6:	8f b5       	in	r24, 0x2f	; 47
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	8f bd       	out	0x2f, r24	; 47
  ec:	08 95       	ret

000000ee <PWM>:
}

void PWM(uint16_t _pwm)
{
	OCR1A=_pwm;
  ee:	9b bd       	out	0x2b, r25	; 43
  f0:	8a bd       	out	0x2a, r24	; 42
	OCR1B=_pwm;
  f2:	99 bd       	out	0x29, r25	; 41
  f4:	88 bd       	out	0x28, r24	; 40
  f6:	08 95       	ret

000000f8 <ADCInit>:
}

void ADCInit()
{
	ADMUX|=(1<<REFS0);
  f8:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA|=((1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
  fa:	86 b1       	in	r24, 0x06	; 6
  fc:	8f 68       	ori	r24, 0x8F	; 143
  fe:	86 b9       	out	0x06, r24	; 6
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	84 e3       	ldi	r24, 0x34	; 52
 104:	9c e0       	ldi	r25, 0x0C	; 12
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <ADCInit+0xe>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <ADCInit+0x18>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <ReadAdc>:
}

uint16_t ReadAdc(uint8_t chanel)
{
	chanel&=0x07;
	ADMUX=(ADMUX&0xf8)|chanel;
 114:	97 b1       	in	r25, 0x07	; 7
 116:	98 7f       	andi	r25, 0xF8	; 248
 118:	87 70       	andi	r24, 0x07	; 7
 11a:	89 2b       	or	r24, r25
 11c:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
 11e:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
 120:	36 99       	sbic	0x06, 6	; 6
 122:	fe cf       	rjmp	.-4      	; 0x120 <ReadAdc+0xc>
	return ADC;
 124:	84 b1       	in	r24, 0x04	; 4
 126:	95 b1       	in	r25, 0x05	; 5
}
 128:	08 95       	ret

0000012a <OnAdc>:

void OnAdc()
{
	ADCSRA|=(1<<ADEN);
 12a:	37 9a       	sbi	0x06, 7	; 6
 12c:	08 95       	ret

0000012e <OffAdc>:
}

void OffAdc()
{
	ADCSRA&=~(1<ADEN);
 12e:	30 98       	cbi	0x06, 0	; 6
 130:	08 95       	ret

00000132 <__vector_14>:
		_delay_ms(1000);
	}
}

ISR(ADC_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	if(adc_sensor1<150){
 154:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <adc_sensor1>
 158:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <adc_sensor1+0x1>
 15c:	86 39       	cpi	r24, 0x96	; 150
 15e:	91 05       	cpc	r25, r1
 160:	20 f4       	brcc	.+8      	; 0x16a <__vector_14+0x38>
		PWM(300);
 162:	8c e2       	ldi	r24, 0x2C	; 44
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	c3 df       	rcall	.-122    	; 0xee <PWM>
 168:	14 c0       	rjmp	.+40     	; 0x192 <__vector_14+0x60>
	}
	else {
		if(adc_sensor1*2>1023){
 16a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <adc_sensor1>
 16e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <adc_sensor1+0x1>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	81 15       	cp	r24, r1
 178:	94 40       	sbci	r25, 0x04	; 4
 17a:	20 f0       	brcs	.+8      	; 0x184 <__vector_14+0x52>
			PWM(1023);
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	93 e0       	ldi	r25, 0x03	; 3
 180:	b6 df       	rcall	.-148    	; 0xee <PWM>
 182:	07 c0       	rjmp	.+14     	; 0x192 <__vector_14+0x60>
		}
		else{
			PWM(adc_sensor1*2);
 184:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <adc_sensor1>
 188:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <adc_sensor1+0x1>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	ae df       	rcall	.-164    	; 0xee <PWM>
		}
	}
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_1>:
ISR(INT0_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
	if(_Status==1)
 1c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <_Status>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	19 f4       	brne	.+6      	; 0x1ce <__vector_1+0x1a>
	{
		_Status=0;
 1c8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_Status>
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <__vector_1+0x20>
	}
	else
	{
		_Status=1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <_Status>
	}
}
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <ReadControlbyte>:

//////////////////////////////////////////////////////////////////////////
 void ReadControlbyte()
 {	
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
	 for(int i=0; i<3; i++)
	 {
		 _pc[i]=GetChar();
 1e4:	6d df       	rcall	.-294    	; 0xc0 <GetChar>
 1e6:	c8 e6       	ldi	r28, 0x68	; 104
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	88 83       	st	Y, r24
 1ec:	69 df       	rcall	.-302    	; 0xc0 <GetChar>
 1ee:	89 83       	std	Y+1, r24	; 0x01
 1f0:	67 df       	rcall	.-306    	; 0xc0 <GetChar>
 1f2:	8a 83       	std	Y+2, r24	; 0x02
	 }
 }
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <PcTask>:
 void PcTask()
 {
	 if (_pc[0]==0x63)
 1fa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_pc>
 1fe:	83 36       	cpi	r24, 0x63	; 99
 200:	19 f4       	brne	.+6      	; 0x208 <PcTask+0xe>
	 {
		 _Com=1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <_Com>
 208:	08 95       	ret

0000020a <main>:
void PcTask();

int main(void)
{
	
	DDRD|=(1<<PIND7);	//EN12
 20a:	8f 9a       	sbi	0x11, 7	; 17
	DDRB|=(1<<PINB0);	//EN34
 20c:	b8 9a       	sbi	0x17, 0	; 23
	PORTD|=(1<<PIND7);
 20e:	97 9a       	sbi	0x12, 7	; 18
	PORTB|=(1<<PINB0);
 210:	c0 9a       	sbi	0x18, 0	; 24
	DDRD &=~((1<<PIND2)|(1<<PIND3)); //input interr
 212:	81 b3       	in	r24, 0x11	; 17
 214:	83 7f       	andi	r24, 0xF3	; 243
 216:	81 bb       	out	0x11, r24	; 17
	
	ADCInit();
 218:	6f df       	rcall	.-290    	; 0xf8 <ADCInit>
	PWMInit();
 21a:	56 df       	rcall	.-340    	; 0xc8 <PWMInit>
	UartInit();
 21c:	30 df       	rcall	.-416    	; 0x7e <UartInit>

	PWM(0);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	65 df       	rcall	.-310    	; 0xee <PWM>
	
	GICR=(1<<INT0);
 224:	80 e4       	ldi	r24, 0x40	; 64
 226:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC00);		//		(1<<ISC00);any logical change			//	(1<<ISC01)|(1<<ISC00);rising edge
 228:	85 b7       	in	r24, 0x35	; 53
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	85 bf       	out	0x35, r24	; 53
	
	sei();
 22e:	78 94       	sei
		//////////////////////////////////////////////////////////////////////////
			//break;
		}
		if(_Com)
		{
			SendADCValue(_pc[1],ReadAdc(_pc[1]));
 230:	c8 e6       	ldi	r28, 0x68	; 104
 232:	d0 e0       	ldi	r29, 0x00	; 0
			_Com=0;
			 if(_pc[2]==0x63)
			 {
				 _Status=1;
 234:	11 e0       	ldi	r17, 0x01	; 1
	
	sei();
	
    while (1) 
    {		
		OnAdc();
 236:	79 df       	rcall	.-270    	; 0x12a <OnAdc>
		adc_board=ReadAdc(__ch_board);
 238:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__ch_board>
 23c:	6b df       	rcall	.-298    	; 0x114 <ReadAdc>
 23e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <adc_board+0x1>
 242:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <adc_board>
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	97 e2       	ldi	r25, 0x27	; 39
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x40>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x46>
 250:	00 00       	nop
		_delay_ms(5);
		adc_sensor1=ReadAdc(__ch_sensor1);
 252:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__ch_sensor1>
 256:	5e df       	rcall	.-324    	; 0x114 <ReadAdc>
 258:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <adc_sensor1+0x1>
 25c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <adc_sensor1>
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	97 e2       	ldi	r25, 0x27	; 39
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x5a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x60>
 26a:	00 00       	nop
		_delay_ms(5);
		if (_Status)
 26c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <_Status>
 270:	88 23       	and	r24, r24
 272:	51 f0       	breq	.+20     	; 0x288 <main+0x7e>
			//_delay_ms(5);
			//SendADCValue(_add_ch_sensor1,adc_sensor1);
			//_delay_ms(5);
		//////////////////////////////////////////////////////////////////////////
			//SendInfoStatus(0xff,0xff,0xff);
			ReadControlbyte();
 274:	b5 df       	rcall	.-150    	; 0x1e0 <ReadControlbyte>
 276:	8f ec       	ldi	r24, 0xCF	; 207
 278:	97 e0       	ldi	r25, 0x07	; 7
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x70>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x76>
 280:	00 00       	nop
			_delay_ms(1);
			PcTask();
 282:	bb df       	rcall	.-138    	; 0x1fa <PcTask>
			
			_Status=0;
 284:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_Status>
		//////////////////////////////////////////////////////////////////////////
			//break;
		}
		if(_Com)
 288:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <_Com>
 28c:	88 23       	and	r24, r24
 28e:	61 f0       	breq	.+24     	; 0x2a8 <main+0x9e>
		{
			SendADCValue(_pc[1],ReadAdc(_pc[1]));
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	40 df       	rcall	.-384    	; 0x114 <ReadAdc>
 294:	bc 01       	movw	r22, r24
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	07 df       	rcall	.-498    	; 0xa8 <SendADCValue>
			_Com=0;
 29a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <_Com>
			 if(_pc[2]==0x63)
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	83 36       	cpi	r24, 0x63	; 99
 2a2:	11 f4       	brne	.+4      	; 0x2a8 <main+0x9e>
			 {
				 _Status=1;
 2a4:	10 93 6c 00 	sts	0x006C, r17	; 0x80006c <_Status>
			 }
		}
		OffAdc();
 2a8:	42 df       	rcall	.-380    	; 0x12e <OffAdc>
 2aa:	9f ef       	ldi	r25, 0xFF	; 255
 2ac:	29 e6       	ldi	r18, 0x69	; 105
 2ae:	88 e1       	ldi	r24, 0x18	; 24
 2b0:	91 50       	subi	r25, 0x01	; 1
 2b2:	20 40       	sbci	r18, 0x00	; 0
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0xa6>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0xb0>
 2ba:	00 00       	nop
 2bc:	bc cf       	rjmp	.-136    	; 0x236 <main+0x2c>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
